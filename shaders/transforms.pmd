---
node: 00050_map_texcoord_transform_dynamic
input: {name="MapIndex", type="int"}
---
```{name="CODE", type="shader", restrict="vshader,declaration"}
uniform mat4 TexMat$MapIndex$;
```

```{restrict="vshader,main"}
  vTexCoord$MapIndex$ = TexMat$MapIndex$ * vTexCoord$MapIndex$;

```
---
node: 00050_map_texcoord_transform_fixed
input: {name="TexCoordIndex", type="int"}
input: {name="Transform", type="mat4"}
input: {name="MapIndex", type="int"}
---
```{name="CODE", type="shader", restrict="vshader,declaration"}
const mat4 TexMat$MapIndex$ = $Transform$;
```

```{restrict="vshader,main"}
  vTexCoord$MapIndex$ = TexMat$MapIndex$ * vTexCoord$MapIndex$;
```


---
node: 05000_map_pass_view_transform
---


```{name="CODE", type="shader", restrict="vshader,main"}
  vPosition = view * ( vPosition + Displace * vNormal );
```


---
node: 00030_map_pass_world_transform
---
```{name="CODE", type="shader", restrict="vshader,declaration"}
uniform mat4 world;
mat4 mWorld = world;
```

```{name="CODE", type="shader", restrict="vshader,main"}
  vPosition = mWorld * vPosition;
  vNormal = mWorld * vec4( vNormal.xyz, 0 );
  vTangent = mWorld * vec4( vTangent.xyz, 0 );
  vCotangent = mWorld * vec4( vCotangent.xyz, 0 );
```

---
node: 00030_map_pass_world_transform_init_instanced
---

```{name="CODE", type="shader", restrict="vshader,extensions"}
#extension GL_ARB_draw_instanced : require
```

---
node: 00040_map_pass_world_transform_init_instanced_attrib
---

```{name="CODE", type="shader", restrict="vshader,declaration"}
IN vec3 instance_position;
IN vec4 instance_rotation;
IN vec3 instance_scaling;

/*vec3 rotate_quat( vec3 p, vec4 q )
{ 
//  return p + 2.0 * cross( q.xyz, cross( q.xyz, p ) + q.w * p );
//  return p + 2.0 * cross( cross( p, q.xyz ) + q.w * p, q.xyz );
  vec4 a = q;
  vec3 b = p;
  vec3 t;
  t.x = - a.x * b.x - a.y * b.y - a.z * b.z;
  t.y =   a.w * b.x + a.y * b.z - a.z * b.y;
  t.z =   a.w * b.y + a.z * b.x - a.x * b.z;
  vec3 c;
  c.z = a.w * b.z + a.x * b.y - a.y * b.x;
  c.x = t.y;
  c.y = t.z;
  t.y = t.x * -a.x + c.x * a.w - c.y * a.z + c.z * a.y;
  t.z = t.x * -a.y + c.y * a.w - c.z * a.x + c.x * a.z;
  c.z = t.x * -a.z + c.z * a.w - c.x * a.y + c.y * a.x;
  c.x = t.y;
  c.y = t.z;
  return c;
}*/
vec3 rotate_quat( vec3 p, vec4 q ){
  vec3 uv, uuv;
  uv = cross( q.xyz, p );
  uuv = cross( q.xyz, uv );
  uv *= ( 2.0f * q.w );
  uuv *= 2.0f;
  return p + uv + uuv;
}
```

```{restrict="vshader,main"}
  vPosition = vec4( rotate_quat( instance_scaling * vPosition.xyz, instance_rotation ), 1.0f );
  vPosition.xyz = vPosition.xyz + instance_position;
  vNormal.xyz = rotate_quat( normalize( instance_scaling * vNormal.xyz ), instance_rotation );
  vTangent.xyz = rotate_quat( normalize( instance_scaling * vTangent.xyz ), instance_rotation );
  vCotangent.xyz = rotate_quat( normalize( instance_scaling * vCotangent.xyz ), instance_rotation );
```

---
node: 00040_map_pass_world_transform_init_instanced_texture
---
```{name="CODE", type="shader", restrict="vshader,declaration"}
uniform sampler2D world_instance;
uniform int world_instance_w;
uniform int world_instance_h;
uniform int world_instance_repeat;

//Credit goes to three.js skinning_pars_vertex.glsl
mat4 getTexMatrix( float i ) {
  float j = i * 4.0f;
  float x = mod( j, float( world_instance_w ));
  float y = floor( j / float( world_instance_w ));

  float dx = 1.0f / float( world_instance_w );
  float dy = 1.0f / float( world_instance_h );

  y = dy * ( y + 0.5f );

  vec4 v1 = texture2D( world_instance, vec2( dx * ( x + 0.5f ), y ));
  vec4 v2 = texture2D( world_instance, vec2( dx * ( x + 1.5f ), y ));
  vec4 v3 = texture2D( world_instance, vec2( dx * ( x + 2.5f ), y ));
  vec4 v4 = texture2D( world_instance, vec2( dx * ( x + 3.5f ), y ));

  return mat4( v1, v2, v3, v4 );
}
```

```{restrict="vshader,main"}
  mWorld = getTexMatrix( mod( gl_InstanceID, world_instance_repeat ));
```

---
node: 00050_map_pass_world_transform_init_instanced_grid
---
```{name="CODE", type="shader", restrict="vshader,declaration"}
uniform int instanceGridWidth = 1;
uniform float instanceGridWorldSize = 1.0f;
IN float instanceID;
```

```{restrict="vshader,main"}
  vPosition.xy += vec2( mod( instanceID, instanceGridWidth ), floor( instanceID / instanceGridWidth )) * instanceGridWorldSize;
```

---
node: 00200_transform_normals_view_notangents
---
```{name="CODE", type="shader", restrict="fshader,main"}
  Normal = vNormal;
  Normal = normalize( view * vec4( Normal.xyz, 0.0f ));
```

---
node: 00200_transform_normals_view
---

```{name="CODE", type="shader", restrict="fshader,main"}
  Normal = Normal * 2 - 1;
  Normal = CalcBumpedNormal( vNormal, vTangent, vCotangent, Normal);
  Normal = normalize( view * vec4( Normal.xyz, 0.0f ));
```

---
node: 00200_transform_mat_view
input: {name="TexCoordIndex", type="text"}
---

```{name="CODE", type="shader", restrict="fshader,main"}
```
