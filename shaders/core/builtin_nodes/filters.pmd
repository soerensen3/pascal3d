---
node: two_pass_blur
input: { name: "Radius", type: "int", default: "5" }
input: { name: "Resolution", type: "int", default: "1024" }
input: { name: "Map", type: "sampler2D" }
input: { name: "UV", type: "vec2" }
---

```{ name: "Declaration", type: "text", visible: false, restrict: "fshader" }
vec4 hblur( float Radius, float Resolution, sampler2D Map, vec2 UV ){
  float blur_step = 1 / Resolution;
  vec4 sum = texture2D( Map, UV );
  for ( float x = 1; x <= Radius; x++ ){ 
    sum+= texture2D( Map, UV + vec2( x*blur_step, 0 ));
    sum+= texture2D( Map, UV - vec2( x*blur_step, 0 ));
  }
  sum /= ( 2.0 * Radius + 1.0 );
  return sum;
}

vec4 vblur( float Radius, float Resolution, sampler2D Map, vec2 UV ){
  float blur_step = 1 / Resolution;
  vec4 sum = texture2D( Map, UV );
  for ( float y = 1; y <= Radius; y++ ){ 
    sum+= texture2D( Map, UV + vec2( 0, y*blur_step ));
    sum+= texture2D( Map, UV - vec2( 0, y*blur_step ));
  }
  sum /= ( 2.0 * Radius + 1.0 );
  return sum;
}

```


```{ name: "hblur", type: "color4" }
hblur( $Radius$, $Resolution$, $Map$, $UV$ )
```

```{ name: "vblur", type: "color4" }
vblur( $Radius$, $Resolution$, $Map$, $UV$ )
```

---
node: grayscale
input: { name: "Color", type: "color4" }
---

```{ name: "Declaration", type: "text", visible: false, restrict: "fshader" }
vec4 grayscale( vec4 Color ){
  vec3 g = vec3( dot( Color.rgb, vec3( 1 )));

  return vec4( g, Color.a );
}

vec4 sepia( vec4 Color ){
  vec3 s = vec3( 
       dot( Color.rgb, vec3( 0.393, 0.769, 0.189 )),
       dot( Color.rgb, vec3( 0.349, 0.686, 0.168 )),
       dot( Color.rgb, vec3( 0.272, 0.534, 0.131 )));

  return vec4( s, Color.a );
}

vec4 luminosity( vec4 Color ){
  float l = dot( Color.rgb, vec3( 0.2326, 0.7152, 0.0722 ));
  return vec4( vec3( l ), Color.a );
}

```

```{ name: "Grayscale", type: "color4" }
grayscale( $Color:assign$ )
```

```{ name: "Sepia", type: "color4" }
sepia( $Color:assign$ )
```

```{ name: "Luminosity", type: "color4" }
luminosity( $Color:assign$ )
```

---
node: hatch
input: { name: "Intensity", type: "float" }
input: { name: "UV", type: "vec2" }
---


```{ name: "Declaration", type: "text", visible: false, restrict: "fshader" }
#define tangent
IN vec4 vTangent;
IN vec4 vCotangent;
IN vec4 vWorldTangent;
IN vec4 vWorldCotangent;

```

```{restrict:"fshader"}
uniform sampler2D _Hatch0;
uniform sampler2D _Hatch1;

vec3 hatch(vec2 _uv, float _intensity){
    //mat3 TBN = mat3( vTangent.xyz, vCotangent.xyz, vNormal.xyz );
    vec3 hatch0 = texture2D(_Hatch0, _uv).rgb;
    vec3 hatch1 = texture2D(_Hatch1, _uv).rgb;

    vec3 overbright = vec3( max(0, _intensity - 1.0 ));

    vec3 weightsA = clamp( vec3( _intensity * 6.0 ) + vec3(-0, -1, -2), 0, 1 );
    vec3 weightsB = clamp( vec3(_intensity * 6.0) + vec3(-3, -4, -5), 0, 1 );

    weightsA.xy -= weightsA.yz;
    weightsA.z -= weightsB.x;
    weightsB.xy -= weightsB.zy;

    hatch0 = hatch0 * weightsA;
    hatch1 = hatch1 * weightsB;

    vec3 hatching = vec3(
                      overbright + hatch0.r +
                      hatch0.g + hatch0.b +
                      hatch1.r + hatch1.g +
                      hatch1.b );

    return hatching;
}


```

```{restrict:"vshader"}
#define tangent
IN vec4 Tangent;
IN vec4 Cotangent;
OUT vec4 vTangent;
OUT vec4 vCotangent;
OUT vec4 vWorldTangent;
OUT vec4 vWorldCotangent;


```

```{ name: "Hatch", type: "color4" }
vec4( hatch( $UV:assign$, $Intensity:assign$ ), 1 )
```

