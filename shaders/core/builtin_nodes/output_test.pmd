---
node testlib
---

output text __Declaration
'
//test declaration

'


#output text __TransformWorld
#
#vWorldPosition = vWorldPosition + vec3( 0, 0, 0.3 * ( sin( vWorldPosition.x * 10 ) + cos( vWorldPosition.y * 10 )));
#
#

output text __TransformView
'
  const float radius = 100;
  float l = length( vPosition.xy ) / radius;
  //vec3 dir = vPosition;
  float zenith = l * PI * 2;
  float azimuth =  0;
  float x = vPosition.x / l; //cos( azimuth ) * sin( zenith );
  float y = vPosition.y / l; //sin( azimuth ) * cos( zenith );  
  float z = vPosition.z / radius * cos( zenith );
  vPosition = vec3( x, y, z )*radius;

'

---
node output
input int __Version
input color4 Color
input vec3 VertexPosition
input vec3 VertexColor
input text __View
---

#version $Version:assign$
output text __vshader
'
#version 130

#if (__VERSION__ > 120)
# define IN in
# define OUT out
# define texture1D texture
# define texture2D texture
# define texture3D texture
#else
# define IN attribute
# define OUT varying
#endif

IN vec3 Position;
IN vec3 Normal;
IN vec4 Color;
OUT vec3 vPosition;
OUT vec3 vWorldPosition;
noperspective OUT vec3 vScreenPosition;
OUT vec3 vWorldNormal;
OUT vec3 vNormal;
OUT vec3 vObjectPosition;
OUT vec4 vColor;

uniform mat4 world = mat4( 1 );
//uniform mat4 view = mat4( 1 );
uniform mat4 proj = mat4( 1 );
uniform vec3 vCamPos;

'select *.__Declaration: vshader,declaration'

void main(){
  //object space
  vObjectPosition = 'select VertexPosition:vshader,assign';
  vNormal = Normal;
'select *.__TransformObject: vshader,initialization'
  
  //world space
  vWorldPosition = ( world * vec4( vObjectPosition, 1 )).xyz;
  vWorldNormal = ( world * vec4( vNormal.xyz, 0 )).xyz;
'select *.__TransformWorld: vshader,initialization'  

  vColor = Color;
'select *.__Initialization: vshader,initialization'
'select *.__TransformView: vshader,initialization'  
  #ifndef mat_view
  vPosition = vWorldPosition;
  vNormal = vWorldNormal;
  #endif

  //projection space
  vec4 ScreenPosition = proj * vec4( vPosition, 1 );
  gl_Position = ScreenPosition;
  vScreenPosition = ( ScreenPosition / ScreenPosition.w ).xyz;
}
'

output text __fshader
'
#version 130

#if (__VERSION__ > 120)
# define IN in
# define OUT out
#else
# define IN varying
# define OUT  
#endif

uniform mat4 world;
//uniform mat4 view;
uniform mat4 proj;
uniform vec3 vCamPos;


IN vec3 vPosition;
IN vec3 vWorldPosition;
noperspective IN vec3 vScreenPosition;
IN vec3 vNormal;
IN vec3 vWorldNormal;
IN vec3 vObjectPosition;
IN vec4 vColor;


'select *.__Declaration: fshader,declaration'

void main(){
'select *.__Initialization: fshader,initialization'
  vec4 color = 'select Color: fshader,assign';
  
  gl_FragColor = color;
}
'

---
node output_canvas
input int __Version
input color4 Color = "1,1,1,1"
input vec4 ClipRect = "0,0,400,400"
---

#version 'select Version:assign'
output text __vshader
'
#version 130

#if (__VERSION__ > 120)
# define IN in
# define OUT out
#else
# define IN attribute
# define OUT varying
#endif

IN vec4 Position;
IN vec4 Color;
OUT vec4 vPosition;
OUT vec4 vColor;

uniform mat4 view;
uniform mat4 proj;

'select *.__Library: vshader,library'

'select *.__Declaration: vshader,library'

void main(){
  vPosition = view * Position;
  vColor = Color;
'select *.__Initialization: vshader,initialization'
  gl_Position = proj * vPosition;
}
'

output text __fshader '
#version 130

#if (__VERSION__ > 120)
# define IN in
# define OUT out
#else
# define IN varying
# define OUT  
#endif

uniform mat4 proj;


IN vec4 vPosition;
IN vec4 vColor;

'select *.__Library: fshader,library'

'select *.__Declaration: fshader,library'

void main(){
'select *.__Initialization: fshader,initialization'
  vec4 ClipRect = 'select ClipRect:assign';
  float clip = 1.0-dot( vec2( 1.0 ), step( ClipRect.zw, vPosition.xy ));
  clip *= 1-dot( vec2( 1 ), 1-step( ClipRect.xy, vPosition.xy ));
  clip = 1;//clamp( 1, 0, clip );
  gl_FragColor = clip * 'select Color: fshader,assign';
}
'
