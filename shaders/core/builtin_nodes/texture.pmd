---
node texture2D
input sampler2D Map
input vec2 UV
---


output text __Initialization
ifdef "fshader"
'
  vec4 'select Map:assign'_val = texture2D( 'select Map:assign', 'select UV:assign' );
'
endif

#Color 
output color4 Color
ifdef "fshader,assign"
select Map:assign'_val'
endif

ifdef "vshader,assign"
'texture2D( 'select Map:assign', 'select UV:assign' )'
endif
#Normal

output vec3 Normal
ifdef "fshader,assign"
'2.0 * 'select Map:assign'_val.rgb - vec3( 1 )'
endif

ifdef "vshader,assign"
'2.0 * texture2D( 'select Map:assign', 'select UV:assign'.xy ).rgb - vec3( 1 )'
endif

output sampler2D Texture
ifdef "assign"
select Map:assign
endif

---
node texture2DLod
input sampler2D Map
input vec2 UV
input float Level
---

output text __Initialization

ifdef "fshader"
'
  vec4 'select Map:assign'_val = textureLod( 'select Map:assign', 'select UV:assign'.xy, 'select Level:assign' );
'
endif

#Color 
output color4 Color
ifdef "fshader,assign"
select Map:assign'_val'
endif

ifdef "vshader,assign"
'textureLod( 'select Map:assign', 'select UV:assign', 'select Level:assign' )'
endif

#Normal
 
output vec3 Normal
ifdef "fshader,assign"
'2.0 * 'select Map:assign'_val.rgb - vec3( 1 )'
endif

ifdef "vshader,assign"
'vec4( 2.0 * textureLod( 'select Map:assign', 'select UV:assign', 'select Level:assign' ).rgb - vec3(1.0, 1.0, 1.0), 1 )'
endif

output sampler2D Texture
ifdef "assign"
select Map:assign
endif

---
node perturb_normal_world
input vec3 Normal
---

#Normal
output vec3 Normal
ifdef "assign"
'CalcBumpedNormal( vWorldNormal.xyz, vWorldTangent.xyz, vWorldCotangent.xyz, 'select Normal:assign' )'
endif

output text __Initialization 
ifdef "vshader"
'
  vWorldTangent = world * vec4( Tangent.xyz, 0 );
  vWorldCotangent = world * vec4( Cotangent.xyz, 0 );
  vTangent = view * vec4( vWorldTangent.xyz, 0 );
  vCotangent = view * vec4( vWorldCotangent.xyz, 0 );
'
endif

output text __Declaration
'
vec3 CalcBumpedNormal( vec3 Normal, vec3 Tangent, vec3 Cotangent, vec3 BumpMapNormal )
{
  vec4 NewNormal = normalize( vec4( BumpMapNormal.xyz, 0 ));
  mat3 TBN = mat3( Tangent.xyz, Cotangent.xyz, Normal.xyz );
  NewNormal = vec4( TBN * NewNormal.xyz, 0 );
  NewNormal = normalize( NewNormal );
  return NewNormal.xyz;
}

'

ifdef "vshader"

'
#define tangent
IN vec4 Tangent;
IN vec4 Cotangent;
OUT vec4 vTangent;
OUT vec4 vCotangent;
OUT vec4 vWorldTangent;
OUT vec4 vWorldCotangent;

'
endif

ifdef "fshader"
'
#define tangent
IN vec4 vTangent;
IN vec4 vCotangent;
IN vec4 vWorldTangent;
IN vec4 vWorldCotangent;

'
endif

---
node spherical_mapping
input vec3 Normal
---


output text __Declaration
'
const vec2 invAtan = vec2(0.1591, 0.3183);
vec4 SampleSphericalMap(vec3 v)
{
  vec2 uv = vec2(atan(v.z, v.x), asin(v.y));
  uv *= invAtan;
  uv += 0.5;
  return vec4( uv, 0, 0 );
}

'

output vec2 UV
'SampleSphericalMap( normalize( 'select Normal:assign'.xyz ))'


---
node inv_spherical_mapping
input vec2 UV
---


output text __Declaration
'
const float PI = 3.1415926535897932384626433832795028841971693993751058209749;

vec2 toUV(in vec3 n)
{
    vec2 uv;

    uv.x = atan(-n.x, n.y);
    uv.x = (uv.x + PI / 2.0) / (PI * 2.0) + PI * (28.670 / 360.0);

    uv.y = acos(n.z) / PI;

    return uv;
}

// Uv range: [0, 1]
vec3 toPolar(in vec2 uv)
{
    float theta = 2.0 * PI * uv.x + - PI / 2.0;
    float phi = PI * uv.y;

    vec3 n;
    n.x = cos(theta) * sin(phi);
    n.y = sin(theta) * sin(phi);
    n.z = cos(phi);

    //n = normalize(n);
    return n;
}

'

output vec3 Normal
'toPolar( 'select UV:assign' )'

---
node convolute_environment
input sampler2D texture
---

output text __Initialization
ifdef "fshader"
'
  const float PI = 3.14159265359;
  // The world vector acts as the normal of a tangent surface
  // from the origin, aligned to WorldPos. Given this normal, calculate all
  // incoming radiance of the environment. The result of this radiance
  // is the radiance of light coming from -Normal direction, which is what
  // we use in the PBR shader to sample irradiance.
  vec3 N = normalize( -vObjectPosition.xyz );

  vec3 irradiance = vec3(0.0);   
  
  // tangent space calculation from origin point
  vec3 up    = vec3( 0.0, 1.0, 0.0 );
  vec3 right = cross( up, vNormal.xyz );
  up         = cross( vNormal.xyz, right );
     
  float sampleDelta = 0.025;
  float nrSamples = 0.0;

  // tangent space to world
  /*vec3 sampleVec = N; 
  const vec2 invAtan = vec2( 0.1591, 0.3183 );
  vec2 uv = vec2( atan( sampleVec.z, sampleVec.x ), asin( sampleVec.y ));
  uv *= invAtan;
  uv += 0.5;

  irradiance += texture2D( 'select texture:assign', uv ).rgb;*/
  
  for(float phi = 0.0; phi < 2.0 * PI; phi += sampleDelta)
  {
      for(float theta = 0.0; theta < 0.5 * PI; theta += sampleDelta)
      {
          // spherical to cartesian (in tangent space)
          vec3 tangentSample = vec3(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));
          // tangent space to world
          vec3 sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * N; 
          const vec2 invAtan = vec2( 0.1591, 0.3183 );
          vec2 uv = vec2( atan( sampleVec.z, sampleVec.x ), 1-asin( sampleVec.y ));
          //uv *= invAtan;
          //uv += 0.5;

          irradiance += texture2D( 'select texture:assign', uv ).rgb * cos(theta) * sin(theta);
          nrSamples++;
      }
  }
  irradiance = PI * irradiance * (1.0 / float(nrSamples));

'
endif

output color4 Color
ifdef "assign"
'vec4( irradiance, 1 )'
endif


---
node convolute_environment_spherical
input sampler2D Texture
input vec2 UV
input float Size = "0.5"
input int Resolution = "512"
---

output text __Declaration
ifdef "fshader"
'
const float PI = 3.14159265359;
vec3 conv_environment( vec2 UV, float Size, int Resolution, sampler2D Texture ){
  float sampleDelta = max( 0.001, 1.0/ float( Resolution ));
  float nrSamples = 0.0;

  vec3 irradiance = vec3( 0.0 );
  float hsize = Size / 2;

  for ( float phi = -hsize; phi < hsize; phi += sampleDelta ){
    for ( float theta = -hsize; theta < hsize; theta += sampleDelta ){
      vec2 uv = vec2( UV.x + phi, 1-UV.y + theta );
      irradiance += texture2D( Texture, uv ).rgb * 4 * ( 0.25 - phi * theta );
      nrSamples++;
    }
  }
  irradiance = irradiance * ( 1.0 / float( nrSamples ));
  return irradiance;
}
'
endif

output text __Initialization
ifdef "fshader"
'
  vec3 irradiance = conv_environment( 'select UV:assign', 'select Size:assign', 'select Resolution:assign', 'select Texture:assign' );
'
endif

output color4 Color
ifdef "assign"
'vec4( irradiance, 1 )'
endif

---
node convolute_environment_spherical_mip
input sampler2D Texture
input vec2 UV
input float Roughness = "0.0"
input int Resolution = "128"
---

output text __Declaration
ifdef "fshader"
'
// ----------------------------------------------------------------------------
float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    const float PI = 3.14159265359;
    float a = roughness*roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}
// ----------------------------------------------------------------------------
// http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
// efficient VanDerCorpus calculation.
float RadicalInverse_VdC(uint bits) 
{
     bits = (bits << 16u) | (bits >> 16u);
     bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
     bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
     bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
     bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
     return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}
// ----------------------------------------------------------------------------
vec2 Hammersley(uint i, uint N)
{
	return vec2(float(i)/float(N), RadicalInverse_VdC(i));
}
// ----------------------------------------------------------------------------
vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{
  const float PI = 3.14159265359;
	float a = roughness*roughness;
	
	float phi = 2.0 * PI * Xi.x;
	float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
	float sinTheta = sqrt(1.0 - cosTheta*cosTheta);
	
	// from spherical coordinates to cartesian coordinates - halfway vector
	vec3 H;
	H.x = cos(phi) * sinTheta;
	H.y = sin(phi) * sinTheta;
	H.z = cosTheta;
	
	// from tangent-space H vector to world-space sample vector
	vec3 up          = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
	vec3 tangent   = normalize(cross(up, N));
	vec3 bitangent = cross(N, tangent);
	
	vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
	return normalize(sampleVec);
}
// ----------------------------------------------------------------------------
vec3 conv_environment_mip( vec2 UV, sampler2D Texture, uint resolution, float roughness ){
  const float PI = 3.14159265359;
  //vec3 N = normalize(Normal);
  vec2 thetaphi= UV *
                 vec2( PI, -PI / 2 );
  vec3 R = normalize( vec3( 
                        cos( thetaphi.y ) * cos( thetaphi.x ),
                        sin( thetaphi.y ),
                        cos( thetaphi.y ) * sin( thetaphi.x )));

  
  // make the simplyfying assumption that V equals R equals the normal 
  vec3 N = R;
  vec3 V = R;

  const uint SAMPLE_COUNT = resolution;
  
  vec3 prefilteredColor = vec3( 0.0 );
  float totalWeight = 0.0;
  
  for( uint i = 0u; i < SAMPLE_COUNT; ++i )
  {
      // generates a sample vector that`s biased towards the preferred alignment direction (importance sampling).
      vec2 Xi = Hammersley(i, SAMPLE_COUNT);
      vec3 H = ImportanceSampleGGX(Xi, N, roughness);
      vec3 L  = normalize(2.0 * dot(V, H) * H - V);
      
      const vec2 invAtan = vec2(0.1591, 0.3183);
      vec2 uv = vec2(atan(L.z, L.x), asin(L.y));
      uv *= invAtan;
      uv += 0.5;

      float NdotL = max(dot(N, L), 0.0);
      if(NdotL > 0.0)
      {
          // sample from the environment`s mip level based on roughness/pdf
          float D   = DistributionGGX(N, H, roughness);
          float NdotH = max(dot(N, H), 0.0);
          float HdotV = max(dot(H, V), 0.0);
          float pdf = D * NdotH / (4.0 * HdotV) + 0.0001; 

          float saTexel  = 4.0 * PI / (6.0 * resolution * resolution);
          float saSample = 1.0 / (float(SAMPLE_COUNT) * pdf + 0.0001);

          float mipLevel = roughness == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel); 
          
          prefilteredColor += textureLod(Texture, uv, mipLevel).rgb * NdotL;
          totalWeight      += NdotL;
      }
  }
  prefilteredColor = prefilteredColor / totalWeight;
  //prefilteredColor = N;
  return prefilteredColor;
}
/*vec3N=R;
vec3V=R;
vec4r=vec4(0.0);
  
//Equirectangularenvironmentmapoutput
floatw=0.0;
for(inti=0;i<numSamples;i++){
vec3H=ImportanceSampleGGX(Hammersley(i,numSamples),uRoughness,N);
vec3L=-reflect(V,H);//((2.0*dot(V,H))*H)-V;
floatnDotL=clamp(dot(N,L),0.0,1.0);
if(nDotL>0.0){
r+=textureCube(iChannel0,L)*nDotL;
w+=nDotL;
}
}
gl_FragColor=r/max(w,1e-4)

  prefilteredColor = prefilteredColor / totalWeight;

  return prefilteredColor;
}*/
'
endif

output text __Initialization
ifdef "fshader"
'
  vec3 irradiance = conv_environment_mip( 'select UV:assign', 'select Texture:assign', 'select Resolution:assign', 'select Roughness:assign' );
'
endif

output color4 Color
ifdef "assign"
'vec4( irradiance, 1 )'
endif


