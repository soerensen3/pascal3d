---
node lib_pbr
---

output text __Declaration
ifdef "fshader"
'
vec3 material_pbr( in vec3 albedo, in float roughness, in float metalness, in float occlusion, in vec3 normal ){
 
  mat3 my2z = mat3( 1, 0, 0, 
                    0, 0, 1, 
                    0, 1, 0 );
  vec3 irradiance = vec3( 0 );
   
  vec3 frag_normal_obj = normalize( normal );
  float frag_metalness = clamp( metalness, 0.0, 1.0 );
  float frag_roughness = clamp( roughness, 0.01, 1.0 );

  frag_normal_obj = gl_FrontFacing ? frag_normal_obj : -frag_normal_obj;
  
  //float normal_mod = 1-smoothstep( 0, 0.25, dot( normalize( -vPosition ).xyz, frag_normal ));
  //frag_normal = mix( frag_normal, vNormal.xyz, normal_mod );

  //vec3 frag_normal = ( view * vec4( frag_normal_obj, 0 )).xyz;


  //vec3 IBLDiff = textureCube( IBLDiffuse, my2z * frag_normal_obj, 0 ).rgb;
  //vec3 IBLDiff = texture2D( IBLDiffuse, SampleSphericalMap( my2z * frag_normal_obj ), 0 ).rgb;
//  const float MAX_REFLECTION_LOD = 9.0;
//  vec3 IBLDiff = textureLod( IBLDiffuse, SampleSphericalMap( my2z * frag_normal_obj ), 0 ).rgb;
  vec3 V = normalize( vCamPos - vWorldPosition ); 
  
  //vec3 IBLSpecAlbedo = textureCube( IBLSpecular, my2z * normalize( reflect( -V, frag_normal_obj )), frag_roughness * MAX_REFLECTION_LOD ).rgb;
//  vec3 IBLSpecAlbedo = textureLod( IBLSpecular, SampleSphericalMap( my2z * normalize( reflect( -V, frag_normal_obj ))), frag_roughness * MAX_REFLECTION_LOD ).rgb;
//  vec2 brdf  = texture2D( IBLIntegrateBRDF, vec2( max( dot( frag_normal_obj, V ), 0.0 ), frag_roughness )).rg;
    
  //IBLDiff = IBLDiff * IBLFactor;
  //IBLSpec = IBLSpec * IBLFactor;
  
  vec3 F0 = vec3( 0.04 ); 
  F0 = mix( F0, albedo.rgb, frag_metalness );

  vec3 kS = fresnelSchlickRoughness( max( dot( frag_normal_obj, V ), 0.0 ), F0, frag_roughness );
  vec3 kD = 1.0 - kS;
  kD *= 1.0 - frag_metalness;
  
//  IBLDiff *= kD;
  
  //IBLDiff = vec3( 0 );

//  vec3 IBLSpec = IBLSpecAlbedo * ( kS * brdf.x + brdf.y );
  
  //irradiance = IBLDiff * frag_albedo.rgb + IBLSpec;
     
  float frag_occlusion = 1-clamp( occlusion, 0, 1 );
  for ( int i=0; i < numPointLights; i++ )    
    irradiance += frag_occlusion * util_PointLightPBR( i, albedo.rgb, frag_roughness, frag_metalness, frag_normal_obj );
  for ( int i=0; i < numDirectionalLights; i++ )
    irradiance += frag_occlusion * util_directionalLightPBR( i, albedo.rgb, frag_roughness, frag_metalness, frag_normal_obj );
  //vec3 tmp = vec3( max( dot( frag_normal_obj, V ), 0.0 ), frag_roughness, 0.0 );
  //vec3 tmp = vec3( brdf, 0 );//texture2D( IBLIntegrateBRDF, vTexCoord0.xy ).rgb;
  //irradiance = ( step( 0.25, tmp ) + step( 0.5, tmp ) + step( 0.75, tmp )) / 3;
  //irradiance = step( 0.5, tmp );
  //irradiance = frag_normal_obj.rgb;
  vec3 frag_color = irradiance;  
  frag_color = frag_color / (frag_color + vec3(1.0));  
  frag_color = pow( frag_color, vec3(1.0/1.8)); // Gamma
  return frag_color;
}
'
endif


---
node material_pbr
input color4 Albedo = "1,1,1,1"
input vec3 WorldNormal = "0,0,1"
input float Metalness = "0"
input float Roughness = "0.5"
input float Occlusion = "0"
lib lib_light
lib lib_pbr
---

output text __Initialization
ifdef "fshader"
'
  vec4 frag_color = vec4( material_pbr( '
  select Albedo:assign'.rgb, '
  select Roughness:assign', '
  select Metalness:assign', '
  select Occlusion:assign', '
  ifconn "WorldNormal" 
    select WorldNormal:assign 
  endif 
  ifnconn "WorldNormal" 
    'vWorldNormal' 
  endif 
  ' ), 'select Albedo:assign'.a );  
'
endif

output color4 Color
ifdef "fshader,assign"
'frag_color'
endif

---
node material_phong
input color4 Albedo
input vec4 Normal
input color4 Specular
input float Hardness
input text Lights
---

#Normal in tangent space, view or object space?
output text __Initialization
ifdef "fshader"
'
  vec3 diffuse = vec3( 0 );
  vec3 specular = vec3( 0 );
  /*'select Normal' = gl_FrontFacing ? 'select Normal' : -'select Normal';
  objNormal = gl_FrontFacing ? objNormal : -objNormal;
 
  vec3 IBLDiff = textureCube( IBLDiffuse, objNormal.xyz, 0 ).rgb;
  vec3 V = normalize( vPosition.xyz );//;
  V = transpose( mat3( view )) * V;
  vec3 IBLSpec = textureCube( IBLSpecular, normalize( reflect( V.xyz, objNormal.xyz )), ( 1 - mat_hardness / 512 ) * 5 ).rgb;
    
  shadow += IBLDiff * IBLFactor;
  spec += IBLSpec * IBLFactor;*/
  vec3 frag_normal = 'select Normal:assign'.xyz;
  float frag_hardness = 'select Hardness:assign';
  vec4 frag_albedo = 'select Albedo:assign';
  for ( int i=0; i < numPointLights; i++ )
    util_PointLight( i, frag_hardness, frag_normal, diffuse, specular, -normalize( vPosition ).xyz );
  for ( int i=0; i < numDirectionalLights; i++ )
    util_directionalLight( i, frag_hardness, frag_normal, diffuse, specular, -normalize( vPosition ).xyz );

'
endif

output color4 Color
ifdef "fshader,assign"
'
vec4( frag_albedo.rgb * diffuse + specular, /*frag_albedo.a*/ 1.0 )
'
endif

