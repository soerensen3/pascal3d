---
node: material_pbr
input: {name:"Albedo", type:"color4", default:"1,1,1,1"}
input: {name:"WorldNormal", type:"vec3", default:"0,0,1"}
input: {name:"Metalness", type:"float", default:"0"}
input: {name:"Roughness", type:"float", default:"0"}
input: {name:"Occlusion", type:"float", default:"0"}
---

#Normal in tangent space, view or object space?

```{name:"Declaration", type:"text", restrict:"fshader", visible:false}
#ifndef Lib_Light
const vec2 invAtan = vec2(0.1591, 0.3183);
vec2 SampleSphericalMap(vec3 v)
{
  vec2 uv = vec2(atan(v.z, v.x), asin(v.y));
  uv *= invAtan;
  uv += 0.5;
  return uv;
}


const int p3dltPoint = 0;
const int p3dltSun = 1;
const int p3dltSpot = 2;

const float PI = 3.14159265359;


#define saturate(a) clamp( a, 0.0, 1.0 )

struct DirectionalLight {
  vec4 Direction;
  vec4 WorldDirection;
  vec4 Color;
};

struct PointLight {
  vec4 Position;
  vec4 WorldPosition;
  vec4 Color;
  float linearAttenuation;
  float quadraticAttenuation;
};

uniform int numDirectionalLights;
uniform DirectionalLight DirectionalLights[ 2 ];
uniform int numPointLights;
uniform PointLight PointLights[ 8 ];
//uniform samplerCube IBLDiffuse;
//uniform samplerCube IBLSpecular;
uniform sampler2D IBLDiffuse;
uniform sampler2D IBLSpecular;
uniform sampler2D IBLIntegrateBRDF;
uniform float IBLFactor;

vec3 F_Schlick( in vec3 specularColor, in float dotLH ) {

  // Original approximation by Christophe Schlick '94
  //;float fresnel = pow( 1.0 - dotLH, 5.0 );

  // Optimized variant (presented by Epic at SIGGRAPH '13)
  float fresnel = exp2( ( -5.55437 * dotLH - 6.98316 ) * dotLH );

  return ( 1.0 - specularColor ) * fresnel + specularColor;

}

float G_BlinnPhong_Implicit( /* in float dotNL, in float dotNV */ ) {

  // geometry term is (n⋅l)(n⋅v) / 4(n⋅l)(n⋅v)

  return 0.25;

}

float D_BlinnPhong( in float shininess, in float dotNH ) {

  // factor of 1/PI in distribution term omitted

  return ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );

}

vec3 BRDF_BlinnPhong( in vec3 specularColor, in float shininess, in vec3 normal, in vec3 lightDir, in vec3 viewDir ) {

  vec3 halfDir = normalize( lightDir + viewDir );

  float dotNH = saturate( dot( normal, halfDir ) );
  float dotLH = saturate( dot( lightDir, halfDir ) );

  vec3 F = F_Schlick( specularColor, dotLH );

  float G = G_BlinnPhong_Implicit( /* dotNL, dotNV */ );

  float D = D_BlinnPhong( shininess, dotNH );

  return F * G * D;
}

float DistributionGGX(vec3 N, vec3 H, float a)
{
    float a2     = a*a;
    float NdotH  = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;
	
    float nom    = a2;
    float denom  = (NdotH2 * (a2 - 1.0) + 1.0);
    denom        = PI * denom * denom;
	
    return nom / denom;
}

float GeometrySchlickGGX(float NdotV, float k)
{
    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;
	
    return nom / denom;
}
  
float GeometrySmith(vec3 N, vec3 V, vec3 L, float k)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx1 = GeometrySchlickGGX(NdotV, k);
    float ggx2 = GeometrySchlickGGX(NdotL, k);
	
    return ggx1 * ggx2;
}

vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}

vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)
{
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(1.0 - cosTheta, 5.0);
}   

vec3 BRDF_CookTorrance( in vec3 albedo, in float roughness, in float metallic, in vec3 normal, in vec3 lightDir ) {

  vec3 viewDir = normalize( vCamPos.xyz - vWorldPosition );
  vec3 F0 = vec3( 0.04 ); 
  F0 = mix( F0, albedo, metallic );

  vec3 halfDir = normalize( lightDir + viewDir );

  //float dotNH = saturate( dot( normal, halfDir ));
  float dotLH = max( 0, dot( lightDir, halfDir ));
  float dotNV = max( 0, dot( normal, viewDir ));
  float dotHV = max( 0, dot( halfDir, viewDir ));
  float dotNL = max( 0, dot( normal, lightDir ));

  vec3 F = fresnelSchlick( dotNV, F0 );//F_Schlick( F0, dotLH );

  float G = GeometrySmith( normal, viewDir, lightDir, roughness );

  float NDF = DistributionGGX( normal, halfDir, roughness );   
          
  vec3 nominator    = NDF * G * F; 
  float denominator = 4 * dotNV * dotNL + 0.001; // 0.001 to prevent divide by zero.
  vec3 specular = nominator / denominator;
  
  // kS is equal to Fresnel
  vec3 kS = F;
  // for energy conservation, the diffuse and specular light can't
  // be above 1.0 (unless the surface emits light); to preserve this
  // relationship the diffuse component (kD) should equal 1.0 - kS.
  vec3 kD = vec3( 1.0 ) - kS;
  // multiply kD by the inverse metalness such that only non-metals 
  // have diffuse lighting, or a linear blend if partly metal (pure metals
  // have no diffuse light).
  kD *= 1.0 - metallic;
  vec3 brdf = max(( kD * albedo / PI + specular ) * dotNL, 0.0 );
  return brdf;
}

float calculateAttenuation(in int i, in float dist, in float light_radius )
{
    return(1.0 / (max( 0.01, 
                  PointLights[i].linearAttenuation * dist +
                  PointLights[i].quadraticAttenuation * dist * dist)));
    return pow( clamp( 1 - pow( dist / light_radius, 4 ), 0, 1 ), 2 ) / ( pow( dist, 2) + 1 );
    //inverse square falloff
    
}

vec3 util_PointLightPBR( in int i, in vec3 albedo, in float roughness, in float metallic,
                         in vec3 N ){
    vec3 lVector = ( PointLights[ i ].WorldPosition.xyz - vWorldPosition.xyz );
    vec3 lightDir = normalize( lVector );  
    float attenuation = calculateAttenuation( i, length( lVector ), PointLights[i].linearAttenuation ); //pointLightDistance[ i ], pointLightDecay[ i ] );
       
    return BRDF_CookTorrance( albedo, roughness, metallic, N, lightDir ) * PointLights[ i ].Color.rgb * PointLights[ i ].Color.a;
}

vec3 util_directionalLightPBR( in int i, in vec3 albedo, in float roughness, in float metallic,
                               in vec3 N ){
    
    //float cosineTerm = saturate( dot( N, LightSource[ i ].direction.xyz ));
    
    return BRDF_CookTorrance( albedo, roughness, metallic, N, DirectionalLights[ i ].WorldDirection.xyz ) * DirectionalLights[ i ].Color.rgb * DirectionalLights[ i ].Color.a;
}


void util_PointLight( in int i, in float shininess,
                      in vec3 N, inout vec3 diffuse, 
                      inout vec3 specular, in vec3 viewDir )

{
    vec3 lVector = ( PointLights[ i ].Position.xyz - vPosition.xyz );
    vec3 lightDir = normalize( lVector );

    // attenuation

    float attenuation = calculateAttenuation( i, length( lVector ), PointLights[i].linearAttenuation ); //pointLightDistance[ i ], pointLightDecay[ i ] );

    // diffuse

    float cosineTerm = saturate( dot( N, lightDir ) );
    diffuse += ( PointLights[ i ].Color.rgb ) * attenuation * PointLights[ i ].Color.a * cosineTerm;

    // specular

    vec3 brdf = BRDF_BlinnPhong( vec3( 1 ), shininess, N, lightDir, viewDir );

    specular += brdf * PointLights[ i ].Color.rgb * attenuation * PointLights[ i ].Color.a * cosineTerm;
}

void util_directionalLight( in int i,
                            in float shininess,
                            in vec3 N,
                            inout vec3 diffuse,
                            inout vec3 specular, 
                            in vec3 viewDir )
{
    // diffuse

    float cosineTerm = saturate( dot( N, DirectionalLights[ i ].Direction.xyz ));
    diffuse += ( DirectionalLights[ i ].Color.rgb ) * DirectionalLights[ i ].Color.a * cosineTerm;

    // specular

    vec3 brdf = BRDF_BlinnPhong( DirectionalLights[ i ].Color.rgb * DirectionalLights[ i ].Color.a, shininess, N, DirectionalLights[ i ].Direction.xyz, viewDir );

    specular += brdf * cosineTerm;
}
#endif
#define Lib_Light

```

```{name:"Initialization", type:"text", restrict:"fshader", visible:false}
  mat3 my2z = mat3( 1, 0, 0, 
                    0, 0, 1, 
                    0, 1, 0 );
  vec3 irradiance = vec3( 0 );
   
  vec3 frag_normal_obj = normalize( $WorldNormal:assign$.xyz );
  float frag_metalness = clamp( $Metalness:assign$, 0.0, 1.0 );
  float frag_roughness = clamp( $Roughness:assign$, 0.01, 1.0 );
  vec4 frag_albedo = $Albedo:assign$;

  frag_normal_obj = gl_FrontFacing ? frag_normal_obj : -frag_normal_obj;
  
  //float normal_mod = 1-smoothstep( 0, 0.25, dot( normalize( -vPosition ).xyz, frag_normal ));
  //frag_normal = mix( frag_normal, vNormal.xyz, normal_mod );

  //vec3 frag_normal = ( view * vec4( frag_normal_obj, 0 )).xyz;


  //vec3 IBLDiff = textureCube( IBLDiffuse, my2z * frag_normal_obj, 0 ).rgb;
  //vec3 IBLDiff = texture2D( IBLDiffuse, SampleSphericalMap( my2z * frag_normal_obj ), 0 ).rgb;
  const float MAX_REFLECTION_LOD = 9.0;
  vec3 IBLDiff = textureLod( IBLDiffuse, SampleSphericalMap( my2z * frag_normal_obj ), 0 ).rgb;
  vec3 V = normalize( vCamPos - vWorldPosition ); 
  
  //vec3 IBLSpecAlbedo = textureCube( IBLSpecular, my2z * normalize( reflect( -V, frag_normal_obj )), frag_roughness * MAX_REFLECTION_LOD ).rgb;
  vec3 IBLSpecAlbedo = textureLod( IBLSpecular, SampleSphericalMap( my2z * normalize( reflect( -V, frag_normal_obj ))), frag_roughness * MAX_REFLECTION_LOD ).rgb;
  vec2 brdf  = texture2D( IBLIntegrateBRDF, vec2( max( dot( frag_normal_obj, V ), 0.0 ), frag_roughness )).rg;
    
  //IBLDiff = IBLDiff * IBLFactor;
  //IBLSpec = IBLSpec * IBLFactor;
  
  vec3 F0 = vec3( 0.04 ); 
  F0 = mix( F0, frag_albedo.rgb, frag_metalness );

  vec3 kS = fresnelSchlickRoughness( max( dot( frag_normal_obj, V ), 0.0 ), F0, frag_roughness );
  vec3 kD = 1.0 - kS;
  kD *= 1.0 - frag_metalness;
  
  IBLDiff *= kD;
  
  //IBLDiff = vec3( 0 );

  vec3 IBLSpec = IBLSpecAlbedo * ( kS * brdf.x + brdf.y );
  
  //irradiance = IBLDiff * frag_albedo.rgb + IBLSpec;
     
  float occlusion = 1-clamp( $Occlusion:assign$, 0, 1 );
  for ( int i=0; i < numPointLights; i++ )    
    irradiance += occlusion * util_PointLightPBR( i, frag_albedo.rgb, frag_roughness, frag_metalness, frag_normal_obj );
  for ( int i=0; i < numDirectionalLights; i++ )
    irradiance += occlusion * util_directionalLightPBR( i, frag_albedo.rgb, frag_roughness, frag_metalness, frag_normal_obj );
  //vec3 tmp = vec3( max( dot( frag_normal_obj, V ), 0.0 ), frag_roughness, 0.0 );
  //vec3 tmp = vec3( brdf, 0 );//texture2D( IBLIntegrateBRDF, vTexCoord0.xy ).rgb;
  //irradiance = ( step( 0.25, tmp ) + step( 0.5, tmp ) + step( 0.75, tmp )) / 3;
  //irradiance = step( 0.5, tmp );
  //irradiance = frag_normal_obj.rgb;
  vec4 frag_color = vec4( irradiance, /*frag_albedo.a*/ 1.0 );  
  frag_color.rgb = frag_color.rgb / (frag_color.rgb + vec3(1.0));  
  frag_color.rgb = pow( frag_color.rgb, vec3(1.0/1.8)); // Gamma

```


```{name:"Color", type:"color4", restrict:"fshader,assign"}
frag_color
```
---
node: material_phong
input: {name:"Albedo", type:"color4"}
input: {name:"Normal", type:"vec4"} 
input: {name:"Specular", type:"color4"}
input: {name:"Hardness", type:"float"}
input: {name:"Lights", type:"text"}
---

#Normal in tangent space, view or object space?

```{name:"Initialization", type:"text", restrict:"fshader", visible:false}
  vec3 diffuse = vec3( 0 );
  vec3 specular = vec3( 0 );
  /*$Normal$ = gl_FrontFacing ? $Normal$ : -$Normal$;
  objNormal = gl_FrontFacing ? objNormal : -objNormal;
 
  vec3 IBLDiff = textureCube( IBLDiffuse, objNormal.xyz, 0 ).rgb;
  vec3 V = normalize( vPosition.xyz );//;
  V = transpose( mat3( view )) * V;
  vec3 IBLSpec = textureCube( IBLSpecular, normalize( reflect( V.xyz, objNormal.xyz )), ( 1 - mat_hardness / 512 ) * 5 ).rgb;
    
  shadow += IBLDiff * IBLFactor;
  spec += IBLSpec * IBLFactor;*/
  vec3 frag_normal = $Normal:assign$.xyz;
  float frag_hardness = $Hardness:assign$;
  vec4 frag_albedo = $Albedo:assign$;
  for ( int i=0; i < numPointLights; i++ )
    util_PointLight( i, frag_hardness, frag_normal, diffuse, specular, -normalize( vPosition ).xyz );
  for ( int i=0; i < numDirectionalLights; i++ )
    util_directionalLight( i, frag_hardness, frag_normal, diffuse, specular, -normalize( vPosition ).xyz );

```


```{name:"Color", type:"color4", restrict:"fshader,assign"}
vec4( frag_albedo.rgb * diffuse + specular, /*frag_albedo.a*/ 1.0 )
```
