---
node: armature
input: {name="numJoints", type="int"}
---
```{name="CODE", type="shader", restrict="declaration"}
//uniform vec3 jointPos[ $numJoints$ ];
//uniform vec4 jointQuat[ $numJoints$ ];
uniform sampler2D jointTex;
uniform int jointTexWidth;
uniform int jointTexHeight;
uniform float time;


void NormalizeDualQuat( inout vec4 real, inout vec4 dual )
{
  real = normalize( real );
  dual -= real * dot( real, dual );
}

void getJointTransform( const in float i, out vec4 quat, out vec4 trans ) {
  float tw = max( 1.0, float( jointTexWidth )); 
  float dx = 1.0 / tw;
  trans = texture2D( jointTex, vec2( dx * ( i * 2.0 + 0.5 ), time ));
  quat = normalize( texture2D( jointTex, vec2( dx * ( i * 2.0 + 1.5 ), time )));
  NormalizeDualQuat( quat, trans );
}
```

```{name="CODE", type="shader", restrict="vshader,declaration"}
IN vec3 jointWeight;
IN vec4 fjointID;

OUT vec3 vjointWeight;
OUT vec4 vjointID;


vec3 transformNormal( in vec3 n, in vec4 quat )  
{
  n += 2.0 * cross(quat.xyz,  cross(quat.xyz, n) + quat.w*n);
  return n;
}

/*vec3 transformPosition( in vec3 v, in vec4 quat, in vec3 trans)
{
  return transformNormal(v, quat) + trans;
}*/

vec3 transformPosition( in vec3 v, in vec4 real, in vec4 dual )
{
  vec3 term1 = cross( real.xyz,  cross (real.xyz, v ) + real.w * v );
  v += 2.0 * ( term1 + real.w * dual.xyz - dual.w * real.xyz + cross( real.xyz, dual.xyz ));
  return v;
}

void getTransform( out vec4 quat, out vec4 trans )
{
  //ivec4 jointID = int( fjointID );
  float jointWeight3 = 1-( jointWeight[ 0 ] + jointWeight[ 1 ] + jointWeight[ 2 ]);
  vec4 quat0, quat1, quat2, quat3;
  vec4 trans0, trans1, trans2, trans3;  
  getJointTransform( floor( fjointID[ 0 ]), quat0, trans0 );
  getJointTransform( floor( fjointID[ 1 ]), quat1, trans1 );
  getJointTransform( floor( fjointID[ 2 ]), quat2, trans2 );
  getJointTransform( floor( fjointID[ 3 ]), quat3, trans3 );
  quat= quat0 * jointWeight[ 0 ]
      + quat1 * jointWeight[ 1 ]
      + quat2 * jointWeight[ 2 ]
      + quat3 * jointWeight3;
  trans= trans0 * jointWeight[ 0 ]
       + trans1 * jointWeight[ 1 ]
       + trans2 * jointWeight[ 2 ]
       + trans3 * jointWeight3;
  NormalizeDualQuat( quat, trans );
}
```

```{name="CODE", type="shader", restrict="vshader,main"}

  vec4 quat;
  vec4 trans;
  getTransform( quat, trans );
  vNormal.xyz = transformNormal( vNormal.xyz, quat );
  vTangent.xyz = transformNormal( vTangent.xyz, quat );
  vCotangent.xyz = transformNormal( vCotangent.xyz, quat );
  vPosition.xyz = transformPosition( vPosition.xyz, quat, trans );
  //vjointWeight = jointWeight;
  //vjointID = fjointID;
```
```{restrict="fshader,declaration"}
IN vec3 vjointWeight;
IN vec4 vjointID;
//uniform vec3 jointPos[ $numJoints$ ];
//uniform vec4 jointQuat[ $numJoints$ ];


```
```{restrict="fshader,main"}

```
