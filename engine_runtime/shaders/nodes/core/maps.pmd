---
node: lib_maps
---
```{name="CODE", type="shader", restrict="declaration,vshader"}
#if (__VERSION__ > 120)
# define IN in
# define OUT out
#else
# define IN attribute
# define OUT varying
#endif
```

```{name="CODE", type="shader", restrict="declaration,fshader"}
#if (__VERSION__ > 120)
# define IN in
# define OUT out
#else
# define IN varying
# define OUT  
#endif
```

```{restrict="declaration"}
uniform mat4 world;
uniform mat4 view;
uniform mat3 matnormal;
uniform mat4 proj;
uniform vec3 campos;
vec4 CalcBumpedNormal(vec4 Normal,vec4 Tangent, vec4 Cotangent, vec4 BumpMapNormal)
{
    //BumpMapNormal = vec4( 2.0 * BumpMapNormal.xyz - vec3(1.0, 1.0, 1.0), 1 );
    vec4 NewNormal;
    mat3 TBN = mat3(Tangent.xyz, Cotangent.xyz, Normal.xyz);
    NewNormal = vec4( TBN * BumpMapNormal.xyz, 1 );
    NewNormal = normalize(NewNormal);
    return NewNormal;
}

vec4 color_add( vec4 v1, vec4 v2 ){
  return v1 + v2;
}

vec4 color_sub( vec4 v1, vec4 v2 ){
  return v1 - v2;
}

vec4 color_mul( vec4 v1, vec4 v2 ){
  return v1 * v2;
}

vec4 color_div( vec4 v1, vec4 v2 ){
  return v1 / v2;
}

vec4 color_mix( vec4 v1, vec4 v2 ){
  return v2;
}
```

---
node: TC_Init
input: {name="Location", type="int"}
input: {name="TexCoordIndex", type="int"}
---
```{name="CODE", type="shader", restrict="vshader,declaration"}
/* layout ( location = $Location$ ) */ IN vec4 TexCoord$TexCoordIndex$;
OUT vec4 vTexCoord$TexCoordIndex$;
```

```{restrict="vshader,main"}
vTexCoord$TexCoordIndex$ = TexCoord$TexCoordIndex$;
```

```{restrict="fshader,declaration"}
IN vec4 vTexCoord$TexCoordIndex$;
```

---
node: TC_Transform
input: {name="TexCoordIndex", type="int"}
---
```{name="CODE", type="shader", restrict="vshader,declaration"}
uniform mat4 TexMat$TexCoordIndex$;
```

```{restrict="vshader,main"}
vTexCoord$TexCoordIndex$ = TexMat$TexCoordIndex$ * vTexCoord$TexCoordIndex$;
```

---
node: Pass_Init
---

```{name="CODE", type="shader", restrict="vshader,declaration"}
/*layout ( location = 0 ) */ IN vec4 Position;
/*layout ( location = 2 ) */ IN vec4 Normal;
/*layout ( location = 3 ) */ IN vec4 Color;
/*layout ( location = 6 ) */ IN vec4 Cotangent;
/*layout ( location = 7 ) */ IN vec4 Tangent;
OUT vec4 vNormal;
OUT vec4 vColor;
OUT vec4 vTangent;
OUT vec4 vCotangent;
OUT vec4 vPosition;
OUT vec3 cameye;
```

```{restrict="vshader,main"}
float Displace = 0.0;
vPosition = Position;
vColor = Color;
vNormal = world * vec4( Normal.xyz, 0 );
vTangent = world * vec4( Tangent.xyz, 0 );
vCotangent = world * vec4( Cotangent.xyz, 0 );
```

```{restrict="fshader,declaration"}
IN vec4 vNormal;
IN vec4 vColor;
IN vec4 vTangent;
IN vec4 vCotangent;
IN vec4 vPosition;
IN vec3 cameye;
OUT vec4 FragColor;

uniform vec4 mat_specular;
uniform float mat_hardness;
```

```{restrict="fshader,main"}
vec4 Normal = vec4( 0, 0, 1, 0 );
vec4 Color = vec4( 1 );
vec4 Specular = mat_specular;
```
---
node: Pass_Combine
---

```{name="mix", type="text" restrict="main"}
color_mix```

```{name="multiply", type="text" restrict="main"}
color_mul```

```{name="add", type="text" restrict="main"}
color_add```

```{name="subtract", type="text" restrict=main}
color_sub```

---
node: Pass_ReadF
input: {name="TexCoordIndex", type="int"}
input: {name="Index", type="int"}
---

```{name="CODE", type="shader", restrict="fshader,declaration"}
uniform sampler2D tex$Index$;
```

```{restrict="fshader,main"}
vec4 val$Index$ = texture2D( tex$Index$, vTexCoord$TexCoordIndex$.xy );
```

---
node: Pass_ReadV
input: {name="TexCoordIndex", type="int"}
input: {name="Index", type="int"}
---

```{name="CODE", type="shader", restrict="vshader,declaration"}
uniform sampler2D tex$Index$;
```

```{restrict="vshader,main"}
vec4 val$Index$ = texture2D( tex$Index$, vTexCoord$TexCoordIndex$.xy );
```

---
node: Pass_Displace
input: {name="Index", type="int"}
input: {name="Factor", type="float"}
input: {name="Mode", type="text"}
---

```{name="CODE", type="shader", restrict="vshader,main"}
Displace= mix( Displace, $Mode$( vec4( Displace ), val$Index$.aaaa ).a, $Factor$ );
```

---
node: Pass_Normal
input: {name="Index", type="int"}
input: {name="Factor", type="float"}
input: {name="Mode", type="text"}
---

```{name="CODE", type="shader", restrict="fshader,main"}
Normal= mix( Normal, $Mode$( Normal, vec4( val$Index$.xyz *2 - 1, 0 )), $Factor$ );
```

---
node: Pass_Diffuse
input: {name="Index", type="int"}
input: {name="Factor", type="float"}
input: {name="Alpha", type="float"}
input: {name="Mode", type="text"}
---

```{name="CODE", type="shader", restrict="fshader,main"}
Color.rgb = mix( Color.rgb, $Mode$( Color, val$Index$ ).rgb, $Factor$ );
Color.a = mix( Color.a, $Mode$( vec4( Color.a ), vec4( val$Index$.a )).a, $Alpha$ );
//MIX INDEPENTLY
```


---
node: Pass_Specular
input: {name="Index", type="int"}
input: {name="Factor", type="float"}
input: {name="Mode", type="text"}
---

```{name="CODE", type="shader", restrict="fshader,main"}
Specular= mix( Specular, $Mode$( Specular, val$Index$ ), $Factor$ );
```

---
node: Pass_Mix
---

```{name="CODE", type="shader", restrict="fshader,main"}
Normal = CalcBumpedNormal( vNormal, vTangent, vCotangent, Normal);
Normal = normalize( view * vec4( Normal.xyz, 0 ));
```

---
node: Pass_Transform
---


```{name="CODE", type="shader", restrict="vshader,main"}
vPosition = view * world * ( vPosition + Displace * vNormal );
```

---
node: Pass_Final
---


```{name="CODE", type="shader", restrict="vshader,main"}
//cameye = - ( view * Position ).xyz;
gl_Position = proj * vPosition;
```

```{restrict="fshader,main"}
FragColor = vec4( Color.rgb * vColor.rgb * shadow.rgb + spec.rgb * Specular.rgb, Color.a * vColor.a ); //(Normal.xyz + 1 )/2
#if (__VERSION__ < 130)
gl_FragColor = FragColor;
#endif
```

