##--------------------------------------------------------------------------------

  '''
    def get_pose_bone_matrix( self, arm, pose_bone ):
      #import mathutils
      #bone_space = mathutils.Matrix(((1,0,0,0),(0,0,1,0),(0,-1,0,0),(0,0,0,1)))
      #mat = arm.convert_space(pose_bone, pose_bone.matrix_basis, 'POSE', 'WORLD') * bone_space
      #return mat
      
      bone_matrix = pose_bone.matrix_channel
      if ( not ( pose_bone.parent is None )):
          parent_matrix = pose_bone.parent.matrix_channel
          bone_matrix = parent_matrix.inverted() * bone_matrix
      return bone_matrix
  ##EXPORTING ARMATURE -------------------------------------------------------------

  ##EXPORTING JOINT ----------------------------------------------------------------

    def ExportPoseJoint( self, armature, pose_bone ):
      if ( self.Verbose ):
        self.report({ 'INFO' }, 'Exporting data ' + pose_bone.name )

      el = self.file.push( 'joint' )
      el.attrib[ 'name' ] = 'joint_' + pose_bone.name 
      
      matrix = armature.matrix_local * self.get_pose_bone_matrix( armature, pose_bone )
      position, quat, scale = matrix.decompose()
      el.attrib['position'] = '{:9f},{:9f},{:9f}'.format( position[ 0 ], position[ 1 ], position[ 2 ])
      el.attrib['quaternion'] = '{:9f},{:9f},{:9f},{:9f}'.format( quat[ 1 ], quat[ 2 ], quat[ 3 ], quat[ 0 ])

      self.file.pop()
  ##--------------------------------------------------------------------------------
  
  
  OR
  
  def get_pose_bone_matrix( self, arm, pose_bone ):
    #import mathutils
    #bone_space = mathutils.Matrix(((1,0,0,0),(0,0,1,0),(0,-1,0,0),(0,0,0,1)))
    #mat = arm.convert_space(pose_bone, pose_bone.matrix_basis, 'POSE', 'WORLD') * bone_space
    #return mat
    
    bone_matrix = pose_bone.matrix_basis
    if ( not ( pose_bone.parent is None )):
        parent_matrix = pose_bone.parent.matrix_channel
        bone_matrix = parent_matrix.inverted() * bone_matrix
    return bone_matrix
  ##EXPORTING ARMATURE -------------------------------------------------------------

  ##EXPORTING JOINT ----------------------------------------------------------------

    def ExportPoseJoint( self, armature, pose_bone ):
      if ( self.Verbose ):
        self.report({ 'INFO' }, 'Exporting data ' + pose_bone.name )

      el = self.file.push( 'joint' )
      el.attrib[ 'name' ] = 'joint_' + pose_bone.name 
      
      matrix = armature.matrix_local * self.get_pose_bone_matrix( armature, pose_bone )
      position, quat, scale = matrix.decompose()
      el.attrib['position'] = '{:9f},{:9f},{:9f}'.format( position[ 0 ], position[ 1 ], position[ 2 ])
      el.attrib['quaternion'] = '{:9f},{:9f},{:9f},{:9f}'.format( quat[ 1 ], quat[ 2 ], quat[ 3 ], quat[ 0 ])

      self.file.pop()
  ##--------------------------------------------------------------------------------  
  '''

